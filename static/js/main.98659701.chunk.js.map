{"version":3,"sources":["components/Basket/basket.module.css","components/Products/products.module.css","cross.svg","util.js","components/Products/index.jsx","components/Basket/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","basket","product","meal","title","total","crossBtn","item","discountBtn","icon","itemTitle","__webpack_require__","p","util","num","Number","toFixed","toLocaleString","Products","_this","this","productItems","props","products","map","react_default","a","createElement","className","css","key","id","href","concat","onClick","e","handleAddToCart","src","sku","alt","details","price","Component","Basket","cartItems","productsArr","totalPrice","i","push","count","reduce","c","length","style","marginLeft","float","handleRemoveFromCart","crossIcon","doc","jsPDF","setFont","setFontType","text","setFontSize","save","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","filter","localStorage","setItem","JSON","stringify","productAlreadyInCart","forEach","cp","objectSpread","listProducts","sort","b","size","filteredProducts","availableSizes","indexOf","toUpperCase","handleSortChange","target","value","handleSizeChange","_this2","getItem","parse","fetch","then","res","json","catch","err","data","Products_Products","Basket_Basket","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98659701.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"basket\":\"basket_basket__27Fhu\",\"product\":\"basket_product__2dVx5\",\"meal\":\"basket_meal__1SuPm\",\"title\":\"basket_title__1lcmr\",\"total\":\"basket_total__1rz0j\",\"crossBtn\":\"basket_crossBtn__odwNW\",\"item\":\"basket_item__1TDXY\",\"discountBtn\":\"basket_discountBtn__32v3J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"products_product__1hNBC\",\"icon\":\"products_icon__1J8oZ\",\"itemTitle\":\"products_itemTitle__GhQ5W\"};","module.exports = __webpack_public_path__ + \"static/media/cross.27e7c55d.svg\";","export default {\r\n    formatCurrency: function (num) {\r\n        return 'KGZ' + Number(num.toFixed(1)).toLocaleString() + ' ';\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport util from '../../util'\r\nimport css from './products.module.css'\r\n\r\nexport default class Products extends Component {\r\n\r\n    render() {\r\n        const productItems = this.props.products.map(product => (\r\n            <div className={css.product} key={product.id}>\r\n                    <a href={`#${product.id}`} onClick={(e) => this.props.handleAddToCart(e, product)}>\r\n                        <div className=\"icon\">\r\n                            <img className=\"icon\" src={`icons/${product.sku}`} alt={product.title} />\r\n                        </div>\r\n                    </a>\r\n\r\n                    <div className={css.details}>\r\n                        <div className={css.itemTitle}>{product.title}</div>\r\n                        <b>{util.formatCurrency(product.price)}</b>\r\n                    </div>\r\n\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {productItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport util from '../../util'\r\nimport css from './basket.module.css'\r\nimport crossIcon from '../../cross.svg'\r\nimport jsPDF from 'jspdf';\r\n\r\n\r\nexport default class Basket extends Component {\r\n\r\n    render() {\r\n        const { cartItems } = this.props;\r\n        const productsArr = []\r\n        const products = cartItems.map(\r\n            (i) => productsArr.push(\r\n                i.title + ' ' + i.count + '*' + i.price + '=' + i.count * i.price\r\n            )\r\n        )\r\n\r\n        const totalPrice = util.formatCurrency(cartItems.reduce((a, c) => (a + c.price * c.count), 0))\r\n\r\n        const getReceipt = () => {\r\n            // console.log('receipt');\r\n\r\n            let doc = new jsPDF('p', 'pt')\r\n\r\n            doc.setFont('courier')\r\n            doc.setFontType('bold')\r\n            doc.text(150, 20, 'Thank you for being with us !')\r\n            doc.setFontType('normal')\r\n            doc.text(100, 35, '***************************************')\r\n            doc.text(200, 60, productsArr)\r\n            doc.text(100, 180, '***************************************')\r\n            doc.setFontType('bold')\r\n            doc.setFontSize(14)\r\n            doc.text(180, 195, `Total price : ${totalPrice} `)\r\n\r\n            doc.save(\"Akmaral.pdf\")\r\n\r\n            // ********************************************************************\r\n\r\n            // var generateData = function (amount) {\r\n            //     var result = [];\r\n            //     var data = {\r\n            //         product: \"Hamburger\",\r\n            //         count: \"2\",\r\n            //         price: \"80\",\r\n            //         sum: \"160\",\r\n            //     };\r\n            //     for (var i = 0; i < amount; i += 1) {\r\n            //         data.id = (i + 1).toString();\r\n            //         result.push(Object.assign({}, data));\r\n            //     }\r\n            //     return result;\r\n            // };\r\n\r\n            // function createHeaders(keys) {\r\n            //     var result = [];\r\n            //     for (var i = 0; i < keys.length; i += 1) {\r\n            //         result.push({\r\n            //             id: keys[i],\r\n            //             name: keys[i],\r\n            //             prompt: keys[i],\r\n            //             width: 65,\r\n            //             align: \"center\",\r\n            //             padding: 0\r\n            //         });\r\n            //     }\r\n            //     return result;\r\n            // }\r\n\r\n            // var headers = createHeaders([\r\n            //     \"id\",\r\n            //     \"Product\",\r\n            //     \"Count\",\r\n            //     \"Price\",\r\n            //     \"Sum\",\r\n            // ]);\r\n\r\n            // var doc = new jsPDF({ putOnlyUsedFonts: true, orientation: \"landscape\" });\r\n            // doc.table(1, 1, generateData(100), headers, { autoSize: true });\r\n            // doc.save(\"Akmaral.pdf\")\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={css.basket}>\r\n                {cartItems.length === 0\r\n                    ? \"Basket is empty\" :\r\n                    <h3>You have {cartItems.length} items in the basket. <hr /></h3>\r\n                }\r\n                <br />\r\n                <b>Sum: {util.formatCurrency(cartItems.reduce((a, c) => (a + c.price * c.count), 0))}</b>\r\n                <br />\r\n                <br />\r\n\r\n                {cartItems.length > 0 &&\r\n                    <div>\r\n                        <ul style={{ marginLeft: -25 }}>\r\n                            {cartItems.map(item => (\r\n                                <li className={css.meal} key={item.id}>\r\n\r\n                                    <div className={css.item}>\r\n                                        <b>{item.title}</b>\r\n                                    </div>\r\n\r\n                                    <span>\r\n                                        {item.count} * {util.formatCurrency(item.price)}\r\n                                    </span>\r\n\r\n                                    <button style={{ float: 'right' }} className={css.crossBtn}\r\n                                        onClick={(e) => this.props.handleRemoveFromCart(e, item)}>\r\n                                        <img src={crossIcon} alt=\"x\" />\r\n                                    </button>\r\n                                </li>))\r\n                            }\r\n                        </ul>\r\n\r\n                    </div>\r\n                }\r\n                <button className={css.discountBtn} onClick={getReceipt}>\r\n                    Click to get a receipt\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Products from \"./components/Products/index\";\r\nimport Basket from \"./components/Basket/index\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      size: \"\",\r\n      sort: \"\",\r\n      cartItems: [],\r\n      products: [],\r\n      filteredProducts: []\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    if (localStorage.getItem(\"cartItems\")) {\r\n      this.setState({\r\n        cartItems: JSON.parse(localStorage.getItem(\"cartItems\"))\r\n      });\r\n    }\r\n\r\n    fetch(\"http://localhost:8000/products\")\r\n      .then(res => res.json())\r\n      .catch(err =>\r\n        fetch(\"db.json\")\r\n          .then(res => res.json())\r\n          .then(data => data.products)\r\n      )\r\n      .then(data => {\r\n        this.setState({ products: data });\r\n        this.listProducts();\r\n      });\r\n  }\r\n\r\n  handleRemoveFromCart = (e, product) => {\r\n    this.setState(state => {\r\n      const cartItems = state.cartItems.filter(a => a.id !== product.id);\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\r\n      return { cartItems: cartItems };\r\n    });\r\n  };\r\n\r\n  handleAddToCart = (e, product) => {\r\n    this.setState(state => {\r\n      const cartItems = state.cartItems;\r\n      let productAlreadyInCart = false;\r\n\r\n      cartItems.forEach(cp => {\r\n        if (cp.id === product.id) {\r\n          cp.count += 1;\r\n          productAlreadyInCart = true;\r\n        }\r\n      });\r\n\r\n      if (!productAlreadyInCart) {\r\n        cartItems.push({ ...product, count: 1 });\r\n      }\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\r\n      return { cartItems: cartItems };\r\n    });\r\n  };\r\n\r\n  listProducts = () => {\r\n    this.setState(state => {\r\n      if (state.sort !== \"\") {\r\n        state.products.sort((a, b) =>\r\n          state.sort === \"lowestprice\"\r\n            ? a.price > b.price\r\n              ? 1\r\n              : -1\r\n            : a.price < b.price\r\n              ? 1\r\n              : -1\r\n        );\r\n      } else {\r\n        state.products.sort((a, b) => (a.id > b.id ? 1 : -1));\r\n      }\r\n      if (state.size !== \"\") {\r\n        return {\r\n          filteredProducts: state.products.filter(\r\n            a => a.availableSizes.indexOf(state.size.toUpperCase()) >= 0\r\n          )\r\n        };\r\n      }\r\n      return { filteredProducts: state.products };\r\n    });\r\n  };\r\n  handleSortChange = e => {\r\n    this.setState({ sort: e.target.value });\r\n    this.listProducts();\r\n  };\r\n  handleSizeChange = e => {\r\n    this.setState({ size: e.target.value });\r\n    this.listProducts();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"product-list\">\r\n          <h3>Food-menu order-box</h3>\r\n          <Products\r\n            products={this.state.filteredProducts}\r\n            handleAddToCart={this.handleAddToCart}\r\n          />\r\n        </div>\r\n\r\n        <Basket\r\n          cartItems={this.state.cartItems}\r\n          handleRemoveFromCart={this.handleRemoveFromCart}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}